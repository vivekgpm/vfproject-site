rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Transactions collection rules
    match /transactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        // Allow creation of transactions by any authenticated user
        request.resource.data.type in ['assetPurchase', 'asset_payment']
      );
      allow update: if isAuthenticated() && (
        // Allow updates to specific fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'paymentDate', 'remarks', 'updatedAt']) ||
        isAdmin()
      );
    }

    // Asset Purchases collection rules
    match /assetPurchases/{assetId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.type == 'assetPurchase'
      );
      allow update: if isAuthenticated() && (
        // Allow updates to non-critical fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'remarks', 'updatedAt', 'pricing.remainingPayment', 'pricing.remainingDiscount']) ||
        isAdmin()
      );
    }

    // PlanMaster collection rules
    match /planMaster/{planId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}